//===-- Y86Subtarget.h - Define Subtarget for the Y86 ----------*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Y86 specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef Y86SUBTARGET_H
#define Y86SUBTARGET_H

#include "Y86FrameLowering.h"
#include "Y86ISelLowering.h"
#include "Y86InstrInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "Y86GenSubtargetInfo.inc"

namespace llvm {

class Y86TargetMachine;

class Y86Subtarget final : public Y86GenSubtargetInfo {
public:
  Y86Subtarget(const std::string &TT,
               const std::string &CPU,
               const std::string &FS,
               TargetMachine &TM);

  // Definition of ParseSubtargetFeatures is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  const DataLayout *getDataLayout() const override {
    return &DL;
  }

  const Y86InstrInfo *getInstrInfo() const override {
    return &InstrInfo;
  }

  const Y86FrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }

  const Y86TargetLowering *getTargetLowering() const override {
    return &TargetLowering;
  }

  const Y86RegisterInfo  *getRegisterInfo() const override {
    return &getInstrInfo()->getRegisterInfo();
  }

  bool is32Bit() const { return In32BitMode; }
  bool is64Bit() const { return !In32BitMode; }

  unsigned getInitialStackLocation() const { return InitialStackLocation; }

private:
  bool In32BitMode;
  unsigned InitialStackLocation; // Initial stack location.
  const DataLayout DL; // Calculates type size & alignment.
  Y86InstrInfo InstrInfo;

  // Lowering...
  Y86FrameLowering FrameLowering;
  Y86TargetLowering TargetLowering;
};

} // End llvm namespace

#endif
